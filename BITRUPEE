import hashlib
import json
from time import time
from flask import Flask, jsonify, request, render_template
from uuid import uuid4
from urllib.parse import urlparse
import requests
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_cors import CORS
from Crypto.PublicKey import RSA
from Crypto.Signature import pkcs1_15
from Crypto.Hash import SHA256
import speech_recognition as sr
import pyttsx3

class Blockchain:
    def __init__(self):
        self.chain = []
        self.current_transactions = []
        self.nodes = set()
        self.name = "BITrupee"
        self.total_supply = 1_000_000_000  # 1 billion
        self.balances = {}  # Dictionary to track balances
        # Create the genesis block
        self.new_block(previous_hash='1', proof=100)

    def register_node(self, address):
        """
        Add a new node to the list of nodes.
        """
        parsed_url = urlparse(address)
        self.nodes.add(parsed_url.netloc)

    def valid_chain(self, chain):
        """
        Determine if a given blockchain is valid.
        """
        last_block = chain[0]
        current_index = 1

        while current_index < len(chain):
            block = chain[current_index]
            print(f'{last_block}')
            print(f'{block}')
            print("\n-----------\n")
            # Check that the hash of the block is correct
            if block['previous_hash'] != self.hash(last_block):
                return False

            # Check that the Proof of Work is correct
            if not self.valid_proof(last_block['proof'], block['proof']):
                return False

            last_block = block
            current_index += 1

        return True

    def resolve_conflicts(self):
        """
        This is our consensus algorithm, it resolves conflicts
        by replacing our chain with the longest one in the network.
        """
        neighbours = self.nodes
        new_chain = None

        # We're only looking for chains longer than ours
        max_length = len(self.chain)

        # Grab and verify the chains from all the nodes in our network
        for node in neighbours:
            response = requests.get(f'http://{node}/chain')

            if response.status_code == 200:
                length = response.json()['length']
                chain = response.json()['chain']

                # Check if the length is longer and the chain is valid
                if length > max_length and self.valid_chain(chain):
                    max_length = length
                    new_chain = chain

        # Replace our chain if we discovered a new, valid chain longer than ours
        if new_chain:
            self.chain = new_chain
            return True

        return False

    def new_block(self, proof, previous_hash=None):
        """
        Creates a new block and adds it to the chain.
        """
        block = {
            'index': len(self.chain) + 1,
            'timestamp': time(),
            'transactions': self.current_transactions,
            'proof': proof,
            'previous_hash': previous_hash or self.hash(self.chain[-1]),
        }
        self.current_transactions = []
        self.chain.append(block)
        return block

    def new_transaction(self, sender, recipient, amount, signature):
        """
        Adds a new transaction to the list of pending transactions.
        """
        if sender != "0" and self.get_balance(sender) < amount:
            return False  # Insufficient balance

        # Verify the signature if the sender is not "0"
        if sender != "0" and not self.verify_signature(sender, recipient, amount, signature):
            return False  # Invalid signature

        self.current_transactions.append({
            'sender': sender,
            'recipient': recipient,
            'amount': amount,
        })

        # Update balances
        if sender != "0":
            self.balances[sender] = self.balances.get(sender, 0) - amount
        self.balances[recipient] = self.balances.get(recipient, 0) + amount

        return self.last_block['index'] + 1

    def get_balance(self, address):
        """
        Calculate the balance of a given address.
        """
        return self.balances.get(address, 0)

    @staticmethod
    def hash(block):
        """
        Creates a SHA-256 hash of a block.
        """
        block_string = json.dumps(block, sort_keys=True).encode()
        return hashlib.sha256(block_string).hexdigest()

    @property
    def last_block(self):
        """
        Returns the last block in the chain.
        """
        return self.chain[-1]

    def proof_of_work(self, last_proof):
        """
        Simple Proof of Work Algorithm:
        - Find a number p' such that hash(pp') contains 4 leading zeroes
        - p is the previous proof, and p' is the new proof
        """
        proof = 0
        while self.valid_proof(last_proof, proof) is False:
            proof += 1

        return proof

    @staticmethod
    def valid_proof(last_proof, proof):
        """
        Validates the Proof: Does hash(last_proof, proof) contain 4 leading zeroes?
        """
        guess = f'{last_proof}{proof}'.encode()
        guess_hash = hashlib.sha256(guess).hexdigest()
        return guess_hash[:4] == "0000"

    @staticmethod
    def verify_signature(sender, recipient, amount, signature):
        """
        Verify the digital signature of a transaction.
        """
        public_key = RSA.import_key(sender)
        message = f'{sender}{recipient}{amount}'.encode()
        h = SHA256.new(message)
        try:
            pkcs1_15.new(public_key).verify(h, bytes.fromhex(signature))
            return True
        except (ValueError, TypeError):
            return False

# Instantiate the Node
app = Flask(__name__)
CORS(app)
limiter = Limiter(
    get_remote_address,
    app=app,
    default_limits=["200 per day", "50 per hour"]
)

# Generate a globally unique address for this node
node_identifier = str(uuid4()).replace('-', '')
print(f'Node Identifier: {node_identifier}')

# Instantiate the Blockchain
blockchain = Blockchain()

@app.route('/', methods=['GET'])
def index():
    return render_template('index.html')

@app.route('/mine', methods=['GET'])
@limiter.limit("10 per minute")
def mine():
    # We run the proof of work algorithm to get the next proof...
    last_block = blockchain.last_block
    last_proof = last_block['proof']
    proof = blockchain.proof_of_work(last_proof)

    # We must receive a reward for finding the proof.
    # The sender is "0" to signify that this node has mined a new coin.
    blockchain.new_transaction(
        sender="0",
        recipient=node_identifier,
        amount=1,
        signature=""  # No signature needed for mining reward
    )

    # Forge the new Block by adding it to the chain
    block = blockchain.new_block(proof)

    response = {
        'message': "New Block Forged",
        'index': block['index'],
        'transactions': block['transactions'],
        'proof': block['proof'],
        'previous_hash': block['previous_hash'],
    }
    return jsonify(response), 200

@app.route('/transactions/new', methods=['POST'])
@limiter.limit("10 per minute")
def new_transaction():
    values = request.get_json()

    # Check that the required fields are in the POST'ed data
    required = ['sender', 'recipient', 'amount', 'signature']
    if not all(k in values for k in required):
        return 'Missing values', 400

    # Create a new Transaction
    index = blockchain.new_transaction(values['sender'], values['recipient'], values['amount'], values['signature'])
    if index is False:
        return 'Insufficient balance or invalid signature', 400

    response = {'message': f'Transaction will be added to Block {index}'}
    return jsonify(response), 201

@app.route('/chain', methods=['GET'])
@limiter.limit("10 per minute")
def full_chain():
    response = {
        'chain': blockchain.chain,
        'length': len(blockchain.chain),
        'name': blockchain.name,
        'total_supply': blockchain.total_supply
    }
    return jsonify(response), 200

@app.route('/nodes/register', methods=['POST'])
@limiter.limit("10 per minute")
def register_nodes():
    values = request.get_json()

    nodes = values.get('nodes')
    if nodes is None:
        return "Error: Please supply a valid list of nodes", 400

    for node in nodes:
        blockchain.register_node(node)

    response = {
        'message': 'New nodes have been added',
        'total_nodes': list(blockchain.nodes),
    }
    return jsonify(response), 201

@app.route('/nodes/resolve', methods=['GET'])
@limiter.limit("10 per minute")
def consensus():
    replaced = blockchain.resolve_conflicts()

    if replaced:
        response = {
            'message': 'Our chain was replaced',
            'new_chain': blockchain.chain
        }
    else:
        response = {
            'message': 'Our chain is authoritative',
            'chain': blockchain.chain
        }

    return jsonify(response), 200

@app.route('/wallet/<address>', methods=['GET'])
@limiter.limit("10 per minute")
def get_wallet_balance(address):
    balance = blockchain.get_balance(address)
    response = {
        'address': address,
        'balance': balance
    }
    return jsonify(response), 200

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)

# AI Agent Code
def listen():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        audio = recognizer.listen(source)
    try:
        command = recognizer.recognize_google(audio)
        print(f"Command: {command}")
        return command
    except sr.UnknownValueError:
        print("Sorry, I did not understand that.")
        return None
    except sr.RequestError:
        print("Sorry, my speech service is down.")
        return None

def speak(text):
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

def handle_command(command):
    if "balance" in command:
        address = command.split("balance of ")[-1]
        response = requests.get(f'http://127.0.0.1:5000/wallet/{address}')
        balance = response.json().get('balance', 'unknown')
        speak(f"The balance of {address} is {balance} BITrupee.")
    elif "mine" in command:
        response = requests.get('http://127.0.0.1:5000/mine')
        message = response.json().get('message', 'unknown')
        speak(message)
    elif "chain" in command:
        response = requests.get('http://127.0.0.1:5000/chain')
        chain = response.json().get('chain', [])
        speak(f"The blockchain has {len(chain)} blocks.")
    else:
        speak("Sorry, I did not understand that command.")

if __name__ == '__main__':
    while True:
        command = listen()
        if command:
            handle_command(command)
